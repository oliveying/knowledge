(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{314:function(s,a,t){"use strict";t.r(a);var n=t(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"sh-是shell脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sh-是shell脚本","aria-hidden":"true"}},[s._v("#")]),s._v(" sh 是shell脚本")]),s._v(" "),t("ul",[t("li",[s._v("#!/bin/sh 可以改为 #!/bin/bash")])]),s._v(" "),t("p",[t("code",[s._v("#!")]),s._v(" 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种shell")]),s._v(" "),t("h2",{attrs:{id:"date-什么意思？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#date-什么意思？","aria-hidden":"true"}},[s._v("#")]),s._v(" date + % 什么意思？")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('date +%Y%m%d        //显示当前时间年月日\n\ndate +%Y%m%d --date="+1 day"  //显示前一天的日期\n\ndate +%Y%m%d --date="-1 day"  //显示后一天的日期\n\ndate +%s  //从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数（时间戳）\n')])])]),t("h2",{attrs:{id:"在linux的一些脚本，需在开头一行指定脚本的解释程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在linux的一些脚本，需在开头一行指定脚本的解释程序","aria-hidden":"true"}},[s._v("#")]),s._v(" 在linux的一些脚本，需在开头一行指定脚本的解释程序")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/bin/env bash")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/bin/bash")]),s._v("\n")])])]),t("p",[t("code",[s._v("#!/usr/bin/env python")]),s._v("  告诉操作系统执行这个脚本的时候，调用"),t("code",[s._v("/usr/bin")]),s._v("下的python解释器；")]),s._v(" "),t("p",[t("code",[s._v("#!/usr/bin/python")]),s._v("　　告诉操作系统到env设置里查找python的安装路径，再调用对应路径下的解释器程序完成操作")]),s._v(" "),t("ul",[t("li",[s._v("两者区别")]),s._v(" "),t("li",[s._v("env\n脚本用env启动的原因，是因为脚本解释器在linux中可能被安装于不同的目录，env可以在系统的"),t("code",[s._v("PATH")]),s._v("目录中查找。同时，env还规定一些系统环境量。 而如果直接将解释器路径写死在脚本里，可能在某些系统就会存在找不到解释器的兼容性问题。")])]),s._v(" "),t("p",[s._v("还可以加上-P参数来指定一些目录去寻找perl这个程序， "),t("code",[s._v("#!/usr/bin/env -S -P /usr/local/bin:/usr/bin:${PATH} perl")]),s._v(" ---\x3e在"),t("code",[s._v("/usr/local/bin")]),s._v("和"),t("code",[s._v("/usr/bin")]),s._v("和PATH变量中定义的目录下寻找perl。")]),s._v(" "),t("p",[s._v("缺点:")]),s._v(" "),t("p",[s._v("有可能在一个多用户的系统中，别人在你的$PATH中放置了一个bash，可能出现错误。")]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("#!/usr/bin/bash")]),s._v("  将对给定的可执行文件系统进行显式控制。")]),s._v(" "),t("p",[s._v("大部分情况下，/usr/bin/env是优先选择的，因为它提供了灵活性，特别是你想在不同的版本下运行这个脚本；而指定具体位置的方式#!/usr/bin/bash，在某些情况下更安全，因为它限制了代码注入的可能。")])])]),s._v(" "),t("p",[s._v("可能在一些系统上"),t("code",[s._v("/usr/bin/bash")]),s._v("没有，而"),t("code",[s._v("/bin/bash")]),s._v("则一定存在的。所以"),t("code",[s._v("/bin/bash")]),s._v("是显示指定的优先选择。")]),s._v(" "),t("h2",{attrs:{id:"运行-shell-脚本有两种方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行-shell-脚本有两种方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 运行 Shell 脚本有两种方法")]),s._v(" "),t("ol",[t("li",[s._v("作为可执行程序")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello world'")]),s._v("\n")])])]),t("p",[s._v("将上面的代码保存为 test.sh, 并 cd 到相应目录：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x ./test.sh "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使脚本具有执行权限 ,注意一定要写成./test.sh")]),s._v("\n ./test.sh "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行脚本")]),s._v("\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("作为解释器参数")])]),s._v(" "),t("ul",[t("li",[s._v("这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("/bin/sh test.sh\n/bin/php test/php\n")])])]),t("h2",{attrs:{id:"shell-变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell-变量","aria-hidden":"true"}},[s._v("#")]),s._v(" shell 变量")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("your_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"duruo.com"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义变量时，变量名不加美元符号， ")]),s._v("\n                      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只能使用英文字母，数字和下划线，首个字符不能以数字开头；")]),s._v("\n                      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 变量名和等号之间不能有空格；")]),s._v("\n                      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不能使用标点符号；")]),s._v("\n                      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不能使用bash里的关键字（可用help命令查看保留关键字）。")]),s._v("\n    \n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 除了显式地直接赋值，还可以用语句给变量赋值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" /etc"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将 /etc 下目录的文件名循环出来。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" /etc"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用变量")]),s._v("\nyour_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"duruo"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$your_name")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${your_name}")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用一个定义过的变量，只要在变量名前面加美元符号即可")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" skill "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" Ada Coffe Action Java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I am good at '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${skill}")]),s._v('Script"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 写成echo "I am good at $skillScript"，解释器就会把$skillScript当成一个变量（其值为空）')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 已定义的变量，可以被重新定义")]),s._v("\nyour_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tom"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$your_name")]),s._v("\nyour_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"alibaba"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 这样写是合法的，但注意，第二次赋值的时候不能写$your_name="alibaba"，使用变量的时候才加美元符（$）')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$your_name")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只读变量")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\nmyUrl"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://www.google.com"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("readonly")]),s._v(" myUrl   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。")]),s._v("\nmyUrl"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://www.baidu.com"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 报错 /bin/sh: NAME: This variable is read only.")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除变量")]),s._v("\nunset variable_name "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用 unset 命令可以删除变量 变量被删除后不能再次使用。unset 命令不能删除只读变量。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\nmyUrl"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://www.baidu.com"')]),s._v("\nunset myUrl\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$myUrl")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行将没有任何输出。")]),s._v("\n")])])]),t("h3",{attrs:{id:"变量类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量类型","aria-hidden":"true"}},[s._v("#")]),s._v(" 变量类型")]),s._v(" "),t("p",[s._v("运行shell时，会同时存在三种变量：")]),s._v(" "),t("ol",[t("li",[s._v("局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。")]),s._v(" "),t("li",[s._v("环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。")]),s._v(" "),t("li",[s._v("shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行")])]),s._v(" "),t("h3",{attrs:{id:"shell-字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell-字符串","aria-hidden":"true"}},[s._v("#")]),s._v(" Shell 字符串")]),s._v(" "),t("p",[s._v("字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("str"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'this is a string'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 单引号字符串的限制：")]),s._v("\n                       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；")]),s._v("\n                       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。")]),s._v("\n\nyour_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'runoob'")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 双引号")]),s._v("\nstr"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, I know you are \\"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$your_name")]),s._v('\\"! \\n"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" -e "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$str")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 输出结果为：Hello, I know you are "runoob"! ')]),s._v("\n             "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 双引号的优点")]),s._v("\n             "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 双引号里可以有变量; 双引号里可以出现转义字符; 拼接字符串")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用双引号拼接")]),s._v("\nyour_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"runoob"')]),s._v("\ngreeting"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello, "')]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$your_name")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" !"')]),s._v("\ngreeting_1"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello, '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${your_name}")]),s._v(' !"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$greeting")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$greeting_1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出结果为 hello, runoob ! hello, runoob !")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用单引号拼接")]),s._v("\ngreeting_2"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello, '")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$your_name")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("' !'")]),s._v("\ngreeting_3"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello, "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${your_name}")]),s._v(" !'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$greeting_2")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$greeting_3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出结果为： hello, runoob ! hello, ${your_name} !")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取字符串长度")]),s._v("\nstring"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abcd"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${#string}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#输出 4")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 提取子字符串")]),s._v("\nstring"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"runoob is a great site"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${string:1:4}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从字符串第 2 个字符开始截取 4 个字符： 输出 unoo ")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找子字符串")]),s._v("\nstring"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"runoob is a great site"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("expr")]),s._v(" index "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$string")]),s._v('"')]),s._v(" io"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：: 输出 4")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#----------")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Shell 数组")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# bash支持一维数组（不支持多维数组），并且没有限定数组的大小。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义数组")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 在 Shell 中，用括号来表示数组，数组元素用"空格"符号分割开。定义数组的一般形式为：')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 数组名=(值1 值2 ... 值n)")]),s._v("\n\narray_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value0 value1 value2 value3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或者")]),s._v("\n\narray_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\nvalue0\nvalue1\nvalue2\nvalue3\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 还可以单独定义数组的各个分量：")]),s._v("\narray_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("value0\narray_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("value1\narray_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("valuen "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可以不使用连续的下标，而且下标的范围没有限制。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 读取数组")]),s._v("\n\nvaluen"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${array_name[n]}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ${数组名[下标]}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${array_name[@]}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用 @ 符号可以获取数组中的所有元素")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取数组的长度")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取数组长度的方法与获取字符串长度的方法相同，例如：")]),s._v("\n\n\nlength"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${#array_name[@]}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取得数组元素的个数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或者")]),s._v("\nlength"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${#array_name[*]}")]),s._v("\n\nlengthn"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${#array_name[n]}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取得数组单个元素的长度")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Shell 注释")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 以 # 开头的行就是注释，会被解释器忽略。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过每一行加一个 # 号设置多行注释，像这样：")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#--------------------------------------------")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这是一个注释")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# author：菜鸟教程")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# site：www.runoob.com")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# slogan：学的不仅是技术，更是梦想！")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#--------------------------------------------")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##### 用户配置区 开始 #####")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这里可以添加脚本描述信息")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##### 用户配置区 结束  #####")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 多行注释")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 多行注释还可以使用以下格式：")]),s._v("\n\n:"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("EOF\n注释内容...\n注释内容...\n注释内容...\nEOF")]),s._v("\nEOF 也可以使用其他符号:\n\n:"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\n注释内容...\n注释内容...\n注释内容...\n'")]),s._v("\n\n:"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n注释内容"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n注释内容"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n注释内容"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n")])])]),t("h2",{attrs:{id:"shell-传递参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell-传递参数","aria-hidden":"true"}},[s._v("#")]),s._v(" shell 传递参数")]),s._v(" "),t("ul",[t("li",[s._v("我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Shell 传递参数实例！"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"执行的文件名：'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第一个参数为：'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第二个参数为：'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第三个参数为：'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出结果如下所示：")]),s._v("\n$ ./test.sh 1 2 3\nShell 传递参数实例！\n执行的文件名：./test.sh\n第一个参数为：1\n第二个参数为：2\n第三个参数为：3\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 几个特殊字符用来处理参数：")]),s._v("\n参数处理\t说明\n$"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#\t传递到脚本的参数个数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),s._v("\t以一个单字符串显示所有向脚本传递的参数。\n    如"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),s._v('"')]),s._v("用「"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"」括起来的情况、以"')]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v(" … "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$n")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"的形式输出所有参数。\n$$\t脚本运行的当前进程ID号\n'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$!")]),s._v("\t后台运行的最后一个进程的ID号\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v("\t与"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),s._v('相同，但是使用时加引号，并在引号中返回每个参数。\n    如"')]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"用「"')]),s._v("」括起来的情况、以"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v('"')]),s._v(" … "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$n")]),s._v('"')]),s._v(" 的形式输出所有参数。\n$-\t显示Shell使用的当前选项，与set命令功能相同。\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("\t显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Shell 传递参数实例！"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第一个参数为：'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"参数个数为：'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"传递的参数作为一个字符串显示：'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出结果如下所示：")]),s._v("\n$ ./test.sh 1 2 3\nShell 传递参数实例！\n第一个参数为：1\n参数个数为：3\n传递的参数作为一个字符串显示：1 2 3\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $* 与 $@ 区别：")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 相同点：都是引用所有参数。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）。')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-- \\'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),s._v(' 演示 ---"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-- \\'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v(' 演示 ---"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出结果如下所示：")]),s._v("\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x test.sh \n$ ./test.sh 1 2 3\n-- "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),s._v(" 演示 ---\n1 2 3\n-- "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v(" 演示 ---\n1\n2\n3\n")])])]),t("h2",{attrs:{id:"shell-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell-数组","aria-hidden":"true"}},[s._v("#")]),s._v(" shell 数组")]),s._v(" "),t("ul",[t("li",[s._v("数组中可以存放多个值。Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小（与 PHP 类似）。")])]),s._v(" "),t("p",[s._v("与大部分编程语言类似，数组元素的下标由0开始。")]),s._v(" "),t("p",[s._v('Shell 数组用括号来表示，元素用"空格"符号分割开，语法格式如下：')]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("array_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". valuen"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n实例\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\nmy_array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("A B "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"C"')]),s._v(" D"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 我们也可以使用下标来定义数组:")]),s._v("\narray_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("value0\narray_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("value1\narray_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("value2\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 读取数组")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 读取数组元素值的一般格式是：")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${array_name[index]}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\nmy_array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("A B "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"C"')]),s._v(" D"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第一个元素为: '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${my_array[0]}")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第二个元素为: '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${my_array[1]}")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第三个元素为: '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${my_array[2]}")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第四个元素为: '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${my_array[3]}")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 结果如下所示：")]),s._v("\n$ ./test.sh\n第一个元素为: A\n第二个元素为: B\n第三个元素为: C\n第四个元素为: D\n获取数组中的所有元素\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用@ 或 * 可以获取数组中的所有元素，例如：")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\nmy_array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("A\nmy_array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("B\nmy_array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("C\nmy_array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("D\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"数组的元素为: '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${my_array[*]}")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"数组的元素为: '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${my_array[@]}")]),s._v('"')]),s._v("\n执行脚本，输出结果如下所示：\n\n$ ./test.sh\n数组的元素为: A B C D\n数组的元素为: A B C D\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取数组的长度")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取数组长度的方法与获取字符串长度的方法相同，例如：")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\nmy_array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("A\nmy_array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("B\nmy_array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("C\nmy_array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("D\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"数组元素个数为: '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${#my_array[*]}")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"数组元素个数为: '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${#my_array[@]}")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 结果如下所示：")]),s._v("\n$ ./test.sh\n数组元素个数为: 4\n数组元素个数为: 4\n")])])])])}],!1,null,null,null);a.default=e.exports}}]);